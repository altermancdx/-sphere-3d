const Cube = require('@/Cube')(module, module.exports, require);
Cube("datav:/com/map3d-earth-arcline/0.0.11/path-generator",["datav:/npm/three/0.88.0"],function(a,b,c){const e=require("three");let g=null;return a.exports=class{constructor(a,b){this.options=Object.assign({},a),g=b,this.paths=[],this.tubeCollection=[]}setData(a){return a&&Array.isArray(a)&&a.length?void(this.data=a,this.processing(),this.render()):console.log("flyingline layer no data")}_getNormal(a,b){let c=new e.Vector3(0,0,0);return a.clone().lerp(b,0.5).sub(c).normalize()}_getPt(a,b,c,d){let e=this.options,f=e.lineArc,g=this._getNormal(b,c),h=b.clone().lerp(c,a).add(g.multiplyScalar((1-a)*a*f*d));return h}_parsePtString(a){if("string"===typeof a&&-1!==a.indexOf(",")){a=a.split(",");let b=+a[1]||0,c=+a[0]||0;return{lat:b,lng:c}}return a}processing(){let a=this.data,b=this.paths,c=this.options,d=c.ptPerTube,h=200+c.height;for(let b=0;b<a.length;b++){let c=a[b],j=[],k=[],i=this._parsePtString(c.to),l=this._parsePtString(c.from),f=g.ll2sphere(+i.lng,+i.lat,h),m=g.ll2sphere(+l.lng,+l.lat,h),n=new e.Vector3(m.x,m.y,m.z),p=new e.Vector3(f.x,f.y,f.z),q=n.distanceTo(p),r=g.ll2plane(+i.lng,+i.lat,h),s=g.ll2plane(+l.lng,+l.lat,h),t=new e.Vector3(s.x,s.y,s.z),u=new e.Vector3(r.x,r.y,r.z),v=t.distanceTo(u);for(let a=0;a<=d;a++){let b=a/d,c=this._getPt(b,n,p,q);j.push(c);let e=this._getPt(b,t,u,v);k.push(e)}let w={spherePath:j,planePath:k,type:c.type||"type1"};this.paths.push(w)}}render(){let a=this.paths;for(let b=0;b<a.length;b++){let c=a[b],d=this.createTubeGeometry(c),e={geometry:d,type:c.type,path:d.path};this.tubeCollection.push(e)}}createTubeGeometry(a){const{spherePath:b,planePath:f}=a;let g=[],h=[],c=this.options;for(let j,d=0;d<b.length;d++){j=b[d],g.push(new e.Vector3(j.x,j.y,j.z));let a=f[d];h.push(new e.Vector3(a.x,a.y,a.z))}let d,i;"bezierCurve"===c.curveType?(d=new e.QuadraticBezierCurve3(...g),i=new e.QuadraticBezierCurve3(...h)):(d=new e.CatmullRomCurve3(g),i=new e.CatmullRomCurve3(h));let j=new e.TubeBufferGeometry(d,c.tubularSegments,c.radius,c.radiusSegments,c.closed),k=new e.TubeBufferGeometry(i,c.tubularSegments,c.radius,c.radiusSegments,c.closed),l={};return l.normal=j.attributes.normal.array,l.spherePositions=j.attributes.position.array,l.uv=j.attributes.uv.array,l.index=j.index.array,l.planePositions=k.attributes.position.array,l.path={sphere:d,plane:i},l}getData(){return this.tubeCollection}},a.exports});;
