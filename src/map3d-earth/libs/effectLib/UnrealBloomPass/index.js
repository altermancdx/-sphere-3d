const Cube = require('@/Cube')(module, module.exports, require);
Cube("datav:/com/@double11-2017/map3d-earth/0.1.14/libs/effectLib/UnrealBloomPass",["datav:/npm/three/0.97.0"],function(a,b,c){var d=require("three");return d.UnrealBloomPass=function(a,b,c,e){d.Pass.call(this),this.strength=void 0===b?1:b,this.radius=c,this.threshold=e,this.resolution=void 0===a?new d.Vector2(256,256):new d.Vector2(a.x,a.y);var f={minFilter:d.LinearFilter,magFilter:d.LinearFilter,format:d.RGBAFormat};this.renderTargetsHorizontal=[],this.renderTargetsVertical=[],this.nMips=5;var g=Math.round(this.resolution.x/2),h=Math.round(this.resolution.y/2);this.renderTargetBright=new d.WebGLRenderTarget(g,h,f),this.renderTargetBright.texture.generateMipmaps=!1;for(var j,k=0;k<this.nMips;k++){j=new d.WebGLRenderTarget(g,h,f),j.texture.generateMipmaps=!1,this.renderTargetsHorizontal.push(j);var j=new d.WebGLRenderTarget(g,h,f);j.texture.generateMipmaps=!1,this.renderTargetsVertical.push(j),g=Math.round(g/2),h=Math.round(h/2)}void 0===d.LuminosityHighPassShader&&console.error("THREE.UnrealBloomPass relies on THREE.LuminosityHighPassShader");var i=d.LuminosityHighPassShader;this.highPassUniforms=d.UniformsUtils.clone(i.uniforms),this.highPassUniforms.luminosityThreshold.value=e,this.highPassUniforms.smoothWidth.value=0.01,this.materialHighPassFilter=new d.ShaderMaterial({uniforms:this.highPassUniforms,vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,defines:{}}),this.separableBlurMaterials=[];for(var l=[3,5,7,9,11],g=Math.round(this.resolution.x/2),h=Math.round(this.resolution.y/2),k=0;k<this.nMips;k++)this.separableBlurMaterials.push(this.getSeperableBlurMaterial(l[k])),this.separableBlurMaterials[k].uniforms.texSize.value=new d.Vector2(g,h),g=Math.round(g/2),h=Math.round(h/2);this.compositeMaterial=this.getCompositeMaterial(this.nMips),this.compositeMaterial.uniforms.blurTexture1.value=this.renderTargetsVertical[0].texture,this.compositeMaterial.uniforms.blurTexture2.value=this.renderTargetsVertical[1].texture,this.compositeMaterial.uniforms.blurTexture3.value=this.renderTargetsVertical[2].texture,this.compositeMaterial.uniforms.blurTexture4.value=this.renderTargetsVertical[3].texture,this.compositeMaterial.uniforms.blurTexture5.value=this.renderTargetsVertical[4].texture,this.compositeMaterial.uniforms.bloomStrength.value=b,this.compositeMaterial.uniforms.bloomRadius.value=0.1,this.compositeMaterial.needsUpdate=!0;this.compositeMaterial.uniforms.bloomFactors.value=[1,0.8,0.6,0.4,0.2],this.bloomTintColors=[new d.Vector3(1,1,1),new d.Vector3(1,1,1),new d.Vector3(1,1,1),new d.Vector3(1,1,1),new d.Vector3(1,1,1)],this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,void 0===d.CopyShader&&console.error("THREE.BloomPass relies on THREE.CopyShader");var m=d.CopyShader;this.copyUniforms=d.UniformsUtils.clone(m.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new d.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:m.vertexShader,fragmentShader:m.fragmentShader,blending:d.AdditiveBlending,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this.oldClearColor=new d.Color,this.oldClearAlpha=1,this.camera=new d.OrthographicCamera(-1,1,1,-1,0,1),this.scene=new d.Scene,this.quad=new d.Mesh(new d.PlaneBufferGeometry(2,2),null),this.quad.frustumCulled=!1,this.scene.add(this.quad)},d.UnrealBloomPass.prototype=Object.assign(Object.create(d.Pass.prototype),{constructor:d.UnrealBloomPass,dispose:function(){for(var a=0;a<this.renderTargetsHorizontal.length;a++)this.renderTargetsHorizontal[a].dispose();for(var a=0;a<this.renderTargetsVertical.length;a++)this.renderTargetsVertical[a].dispose();this.renderTargetBright.dispose()},setSize:function(a,b){var c=Math.round(a/2),e=Math.round(b/2);this.renderTargetBright.setSize(c,e);for(var f=0;f<this.nMips;f++)this.renderTargetsHorizontal[f].setSize(c,e),this.renderTargetsVertical[f].setSize(c,e),this.separableBlurMaterials[f].uniforms.texSize.value=new d.Vector2(c,e),c=Math.round(c/2),e=Math.round(e/2)},render:function(a,b,c,e,f){this.oldClearColor.copy(a.getClearColor()),this.oldClearAlpha=a.getClearAlpha();var g=a.autoClear;a.autoClear=!1,a.setClearColor(new d.Color(0,0,0),0),f&&a.context.disable(a.context.STENCIL_TEST),this.highPassUniforms.tDiffuse.value=c.texture,this.highPassUniforms.luminosityThreshold.value=this.threshold,this.quad.material=this.materialHighPassFilter,a.render(this.scene,this.camera,this.renderTargetBright,!0);for(var h=this.renderTargetBright,j=0;j<this.nMips;j++)this.quad.material=this.separableBlurMaterials[j],this.separableBlurMaterials[j].uniforms.colorTexture.value=h.texture,this.separableBlurMaterials[j].uniforms.direction.value=d.UnrealBloomPass.BlurDirectionX,a.render(this.scene,this.camera,this.renderTargetsHorizontal[j],!0),this.separableBlurMaterials[j].uniforms.colorTexture.value=this.renderTargetsHorizontal[j].texture,this.separableBlurMaterials[j].uniforms.direction.value=d.UnrealBloomPass.BlurDirectionY,a.render(this.scene,this.camera,this.renderTargetsVertical[j],!0),h=this.renderTargetsVertical[j];this.quad.material=this.compositeMaterial,this.compositeMaterial.uniforms.bloomStrength.value=this.strength,this.compositeMaterial.uniforms.bloomRadius.value=this.radius,this.compositeMaterial.uniforms.bloomTintColors.value=this.bloomTintColors,a.render(this.scene,this.camera,this.renderTargetsHorizontal[0],!0),this.quad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetsHorizontal[0].texture,f&&a.context.enable(a.context.STENCIL_TEST),a.render(this.scene,this.camera,c,!1),a.setClearColor(this.oldClearColor,this.oldClearAlpha),a.autoClear=g},getSeperableBlurMaterial:function(a){return new d.ShaderMaterial({defines:{KERNEL_RADIUS:a,SIGMA:a},uniforms:{colorTexture:{value:null},texSize:{value:new d.Vector2(0.5,0.5)},direction:{value:new d.Vector2(0.5,0.5)}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"#include <common>\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\t\t\t\tuniform vec2 direction;\t\t\t\t\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\t\t\t\t}\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\t\t\t\t\tfloat fSigma = float(SIGMA);\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, fSigma);\t\t\t\t\tvec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\t\t\t\t\tfor( int i = 1; i < KERNEL_RADIUS; i ++ ) {\t\t\t\t\t\tfloat x = float(i);\t\t\t\t\t\tfloat w = gaussianPdf(x, fSigma);\t\t\t\t\t\tvec2 uvOffset = direction * invSize * x;\t\t\t\t\t\tvec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\t\t\t\t\t\tvec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\t\t\t\t\t\tdiffuseSum += (sample1 + sample2) * w;\t\t\t\t\t\tweightSum += 2.0 * w;\t\t\t\t\t}\t\t\t\t\tgl_FragColor = vec4(diffuseSum/weightSum, texture2D( colorTexture, vUv).a);\n\t\t\t\t}"})},getCompositeMaterial:function(a){return new d.ShaderMaterial({defines:{NUM_MIPS:a},uniforms:{blurTexture1:{value:null},blurTexture2:{value:null},blurTexture3:{value:null},blurTexture4:{value:null},blurTexture5:{value:null},dirtTexture:{value:null},bloomStrength:{value:1},bloomFactors:{value:null},bloomTintColors:{value:null},bloomRadius:{value:0}},vertexShader:"varying vec2 vUv;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}",fragmentShader:"varying vec2 vUv;\t\t\t\tuniform sampler2D blurTexture1;\t\t\t\tuniform sampler2D blurTexture2;\t\t\t\tuniform sampler2D blurTexture3;\t\t\t\tuniform sampler2D blurTexture4;\t\t\t\tuniform sampler2D blurTexture5;\t\t\t\tuniform sampler2D dirtTexture;\t\t\t\tuniform float bloomStrength;\t\t\t\tuniform float bloomRadius;\t\t\t\tuniform float bloomFactors[NUM_MIPS];\t\t\t\tuniform vec3 bloomTintColors[NUM_MIPS];\t\t\t\t\t\t\t\tfloat lerpBloomFactor(const in float factor) { \t\t\t\t\tfloat mirrorFactor = 1.2 - factor;\t\t\t\t\treturn mix(factor, mirrorFactor, bloomRadius);\t\t\t\t}\t\t\t\t\t\t\t\tvoid main() {\t\t\t\t\tgl_FragColor = bloomStrength * ( lerpBloomFactor(bloomFactors[0]) * vec4(bloomTintColors[0], 1.0) * texture2D(blurTexture1, vUv) + \t\t\t\t\t \t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[1]) * vec4(bloomTintColors[1], 1.0) * texture2D(blurTexture2, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[2]) * vec4(bloomTintColors[2], 1.0) * texture2D(blurTexture3, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[3]) * vec4(bloomTintColors[3], 1.0) * texture2D(blurTexture4, vUv) + \t\t\t\t\t\t\t\t\t\t\t\t lerpBloomFactor(bloomFactors[4]) * vec4(bloomTintColors[4], 1.0) * texture2D(blurTexture5, vUv) );\t\t\t\t}"})}}),d.UnrealBloomPass.BlurDirectionX=new d.Vector2(1,0),d.UnrealBloomPass.BlurDirectionY=new d.Vector2(0,1),a.exports=d.UnrealBloomPass,a.exports});;
