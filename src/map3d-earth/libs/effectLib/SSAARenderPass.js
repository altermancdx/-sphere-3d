const Cube = require('@/Cube')(module, module.exports, require);
Cube("datav:/com/@double11-2017/map3d-earth/0.1.14/libs/effectLib/SSAARenderPass.js",["datav:/npm/three/0.97.0"],function(a,b,c){var d=require("three");return d.SSAARenderPass=function(a,b,c,e){d.Pass.call(this),this.scene=a,this.camera=b,this.sampleLevel=4,this.unbiased=!0,this.clearColor=void 0===c?0:c,this.clearAlpha=void 0===e?0:e,void 0===d.CopyShader&&console.error("THREE.SSAARenderPass relies on THREE.CopyShader");var f=d.CopyShader;this.copyUniforms=d.UniformsUtils.clone(f.uniforms),this.copyMaterial=new d.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:f.vertexShader,fragmentShader:f.fragmentShader,premultipliedAlpha:!0,transparent:!0,blending:d.AdditiveBlending,depthTest:!1,depthWrite:!1}),this.camera2=new d.OrthographicCamera(-1,1,1,-1,0,1),this.scene2=new d.Scene,this.quad2=new d.Mesh(new d.PlaneGeometry(2,2),this.copyMaterial),this.quad2.frustumCulled=!1,this.scene2.add(this.quad2)},d.SSAARenderPass.prototype=Object.assign(Object.create(d.Pass.prototype),{constructor:d.SSAARenderPass,dispose:function(){this.sampleRenderTarget&&(this.sampleRenderTarget.dispose(),this.sampleRenderTarget=null),this.scene2.remove(this.quad2),this.scene2.remove(this.camera2),this.quad2.dispose&&this.quad2.dispose(),this.camera2.dispose&&this.camera2.dispose(),this.copyMaterial.dispose&&this.copyMaterial.dispose(),this.quad2=null,this.scene2=null,this.camera2=null},setSize:function(a,b){this.sampleRenderTarget&&this.sampleRenderTarget.setSize(a,b)},render:function(a,b,c){this.sampleRenderTarget||(this.sampleRenderTarget=new d.WebGLRenderTarget(c.width,c.height,{minFilter:d.LinearFilter,magFilter:d.LinearFilter,format:d.RGBAFormat}));var e=d.SSAARenderPass.JitterVectors[Math.max(0,Math.min(this.sampleLevel,5))],f=a.autoClear;a.autoClear=!1;var g=a.getClearColor().getHex(),h=a.getClearAlpha(),j=1/e.length;this.copyUniforms.tDiffuse.value=this.sampleRenderTarget.texture;for(var k,l=c.width,m=c.height,n=0;n<e.length;n++){k=e[n],this.camera.setViewOffset&&this.camera.setViewOffset(l,m,0.0625*k[0],0.0625*k[1],l,m);var i=j;if(this.unbiased){var o=-0.5+(n+0.5)/e.length;i+=1/32*o}this.copyUniforms.opacity.value=i,a.setClearColor(new d.Color(this.clearColor),this.clearAlpha),a.render(this.scene,this.camera,this.sampleRenderTarget,!0),0===n&&a.setClearColor(0,0),a.render(this.scene2,this.camera2,this.renderToScreen?null:b,0===n)}this.camera.clearViewOffset&&this.camera.clearViewOffset(),a.autoClear=f,a.setClearColor(g,h)}}),d.SSAARenderPass.JitterVectors=[[[0,0]],[[4,4],[-4,-4]],[[-2,-6],[6,-2],[-6,2],[2,6]],[[1,-3],[-1,3],[5,1],[-3,-5],[-5,5],[-7,-1],[3,7],[7,-7]],[[1,1],[-1,-3],[-3,2],[4,-1],[-5,-2],[2,5],[5,3],[3,-5],[-2,6],[0,-7],[-4,-6],[-6,4],[-8,0],[7,-4],[6,7],[-7,-8]],[[-4,-7],[-7,-5],[-3,-5],[-5,-4],[-1,-4],[-2,-2],[-6,-1],[-4,0],[-7,1],[-1,2],[-6,3],[-3,3],[-7,6],[-3,6],[-5,7],[-1,7],[5,-7],[1,-6],[6,-5],[4,-4],[2,-3],[7,-2],[1,-1],[4,-1],[2,1],[6,2],[0,4],[4,4],[2,5],[7,5],[5,6],[3,7]]],a.exports=d.SSAARenderPass,a.exports});;
