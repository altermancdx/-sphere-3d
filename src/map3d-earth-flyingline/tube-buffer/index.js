const Cube = require('@/Cube')(module, module.exports, require);
Cube("datav:/com/map3d-earth-flyingline/0.0.14/tube-buffer",["datav:/npm/eventemitter3/2.0.3"],function(a,b,c){let d=null,e=null;const f=require("eventemitter3");return a.exports=class extends f{constructor(a){super(),this.options=Object.assign({tubularSegments:10,radius:0.1,radiusSegments:3,color:"#E7EE98",opacity:1,lineLength:0.12,speed:5e-3,curveType:"bezierCurve",closed:!1,data:null},a)}addTo(a){return a?void(d=a.THREE,e=a.Utils,this.map=a,this.scene=a.scene,this.init()):console.warn("tube buffer needs map layer")}setData(a){return a?void(this.data=a):console.log("error in tube-buffer: data")}init(){let a=this.options,b=this.data,c=new d.BufferGeometry;c.setIndex(new d.BufferAttribute(b.index,1)),c.addAttribute("sphere_position",new d.BufferAttribute(b.spherePositions,3).setDynamic(!0)),c.addAttribute("plane_position",new d.BufferAttribute(b.planePositions,3).setDynamic(!0)),c.addAttribute("uv",new d.BufferAttribute(b.uv,2)),c.addAttribute("normal",new d.BufferAttribute(b.normal,3)),c.computeBoundingSphere();let e=this.mesh=new d.Mesh(c,this.getMaterial());e.frustumCulled=!1,e.renderOrder=100+Math.round(3e3*Math.random()),this.scene.add(e),this.checkVisible()}getMaterial(){let a=this.options,b=a.opacity,f=e.Chroma(a.color).gl(),g=a.lineLength;return new d.ShaderMaterial({uniforms:{uColor:{value:new d.Vector3(f[0],f[1],f[2])},uLength:{value:g},uTimeCounter:{value:Math.random()},uOpacity:{value:a.opacity},u_ease_index:{value:1},u_proj_type:{value:this.map.projType}},vertexShader:require("@/map3d-earth-flyingline/shader/vert.glsl"),fragmentShader:require("@/map3d-earth-flyingline/shader/frag.glsl"),vertexColors:d.VertexColors,blending:d.NormalBlending,side:d.FrontSide,depthTest:!0,depthWrite:!1,transparent:!0})}animation(){if(this.mesh&&this.mesh.material){let a=this.mesh.material,b=this.options;a.uniforms.uTimeCounter.value+=b.speed,a.uniforms.uTimeCounter.value>1+0.5*b.lineLength&&(a.uniforms.uTimeCounter.value=0)}}transform(a,b){if(this.mesh&&this.mesh.material){let c=this.mesh.material;c.uniforms.u_ease_index.value=b,c.uniforms.u_proj_type.value=a}}checkVisible(){let a=this.options;a.visible?this.show():this.hide()}update(){let a=this.options,b=e.Chroma(a.color).gl(),c=this.mesh.material;c.uniforms.uLength.value=a.lineLength,c.uniforms.uOpacity.value=a.opacity,c.uniforms.uColor.value=new d.Vector3(b[0],b[1],b[2]),c.needsUpdate=!0}updateOptions(a){this.options=e.mergeOptions(this.options,a||{}),this.update()}hide(){this.mesh&&(this.mesh.visible=!1)}show(){this.mesh&&(this.mesh.visible=!0)}visify(){this.options.visible=!0,this.show()}remove(){this.scene.remove(this.mesh),this.mesh&&this.mesh.dispose&&this.mesh.dispose(),this.mesh.geometry&&this.mesh.geometry.dispose&&this.mesh.geometry.dispose(),this.mesh.material&&this.mesh.material.dispose&&this.mesh.material.dispose(),this.mesh=null}},a.exports});;
